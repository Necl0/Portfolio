import { AstroErrorCodes } from "./codes.js";
import { codeFrame } from "./printer.js";
class AstroError extends Error {
  constructor(props, ...params) {
    super(...params);
    const { errorCode, name, message, stack, location, hint, frame } = props;
    this.errorCode = errorCode;
    if (name) {
      this.name = name;
    } else {
      this.name = AstroErrorCodes[errorCode];
    }
    if (message)
      this.message = message;
    this.stack = stack ? stack : this.stack;
    this.loc = location;
    this.hint = hint;
    this.frame = frame;
  }
  setErrorCode(errorCode) {
    this.errorCode = errorCode;
    this.name = AstroErrorCodes[errorCode];
  }
  setLocation(location) {
    this.loc = location;
  }
  setName(name) {
    this.name = name;
  }
  setMessage(message) {
    this.message = message;
  }
  setHint(hint) {
    this.hint = hint;
  }
  setFrame(source, location) {
    this.frame = codeFrame(source, location);
  }
}
class CSSError extends AstroError {
  constructor() {
    super(...arguments);
    this.type = "CSSError";
  }
  static is(err) {
    return err.type === "CSSError";
  }
}
class CompilerError extends AstroError {
  constructor(props, ...params) {
    super(props, ...params);
    this.type = "CompilerError";
    this.name = "CompilerError";
  }
  static is(err) {
    return err.type === "CompilerError";
  }
}
class RuntimeError extends AstroError {
  constructor() {
    super(...arguments);
    this.type = "RuntimeError";
  }
  static is(err) {
    return err.type === "RuntimeError";
  }
}
class MarkdownError extends AstroError {
  constructor() {
    super(...arguments);
    this.type = "MarkdownError";
  }
  static is(err) {
    return err.type === "MarkdownError";
  }
}
class AggregateError extends AstroError {
  constructor(props, ...params) {
    super(props, ...params);
    this.type = "AstroAggregateError";
    this.errors = props.errors;
  }
  static is(err) {
    return err.type === "AstroAggregateError";
  }
}
export {
  AggregateError,
  AstroError,
  CSSError,
  CompilerError,
  MarkdownError,
  RuntimeError
};
