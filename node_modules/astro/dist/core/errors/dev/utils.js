import * as fs from "node:fs";
import { AggregateError } from "../errors.js";
import { codeFrame } from "../printer.js";
import { collectInfoFromStacktrace } from "../utils.js";
const incompatiblePackages = {
  "react-spectrum": `@adobe/react-spectrum is not compatible with Vite's server-side rendering mode at the moment. You can still use React Spectrum from the client. Create an island React component and use the client:only directive. From there you can use React Spectrum.`
};
const incompatPackageExp = new RegExp(`(${Object.keys(incompatiblePackages).join("|")})`);
function collectErrorMetadata(e, filePath) {
  const err = AggregateError.is(e) ? e.errors : [e];
  err.forEach((error) => {
    if (error.stack) {
      error = collectInfoFromStacktrace(e);
    }
    if (!error.frame && error.loc) {
      try {
        const fileContents = fs.readFileSync(error.loc.file, "utf8");
        const frame = codeFrame(fileContents, error.loc);
        error.frame = frame;
      } catch {
      }
    }
    if (!error.hint) {
      error.hint = generateHint(e, filePath);
    }
  });
  if (!AggregateError.is(e) && Array.isArray(e.errors)) {
    e.errors.forEach((buildError, i) => {
      const { location, pluginName } = buildError;
      if (location) {
        err[i].loc = { file: location.file, line: location.line, column: location.column };
        err[i].id = err[0].id || (location == null ? void 0 : location.file);
      }
      const possibleFilePath = err[i].pluginCode || err[i].id || (location == null ? void 0 : location.file);
      if (possibleFilePath && !err[i].frame) {
        try {
          const fileContents = fs.readFileSync(possibleFilePath, "utf8");
          err[i].frame = codeFrame(fileContents, { ...err[i].loc, file: possibleFilePath });
        } catch {
        }
      }
      if (pluginName) {
        err[i].plugin = pluginName;
      }
      err[i].hint = generateHint(err[0], filePath);
    });
  }
  return err[0];
}
function generateHint(err, filePath) {
  var _a, _b;
  if (/Unknown file extension \"\.(jsx|vue|svelte|astro|css)\" for /.test(err.message)) {
    return "You likely need to add this package to `vite.ssr.noExternal` in your astro config file.";
  } else if (err.toString().startsWith("ReferenceError") && ((_b = ((_a = err.loc) == null ? void 0 : _a.file) ?? (filePath == null ? void 0 : filePath.pathname)) == null ? void 0 : _b.endsWith(".astro"))) {
    return "export statements in `.astro` files do not have access to local variable declarations, only imported values.";
  } else {
    const res = incompatPackageExp.exec(err.stack);
    if (res) {
      const key = res[0];
      return incompatiblePackages[key];
    }
  }
  return void 0;
}
export {
  collectErrorMetadata,
  incompatPackageExp,
  incompatiblePackages
};
