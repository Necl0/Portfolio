import * as fs from "fs";
import { fileURLToPath } from "url";
import { createLogger } from "vite";
import { AstroErrorCodes } from "../codes.js";
import { AstroError } from "../errors.js";
import { incompatPackageExp } from "./utils.js";
function createCustomViteLogger(logLevel) {
  const viteLogger = createLogger(logLevel);
  const logger = {
    ...viteLogger,
    error(msg, options) {
      if (incompatPackageExp.test(msg))
        return;
      return viteLogger.error(msg, options);
    }
  };
  return logger;
}
function enhanceViteSSRError(error, filePath, loader) {
  var _a, _b;
  if (loader) {
    try {
      loader.fixStacktrace(error);
    } catch {
    }
  }
  const newError = new AstroError({
    name: error.name,
    message: error.message,
    location: error.loc,
    stack: error.stack,
    errorCode: error.errorCode ? error.errorCode : AstroErrorCodes.UnknownViteSSRError
  });
  if (filePath && /failed to load module for ssr:/.test(error.message)) {
    const importName = (_a = error.message.split("for ssr:").at(1)) == null ? void 0 : _a.trim();
    if (importName) {
      newError.setMessage(`Could not import "${importName}"`);
      newError.setHint("Make sure the file exists");
      newError.setErrorCode(AstroErrorCodes.FailedToLoadModuleSSR);
      const path = fileURLToPath(filePath);
      const content = fs.readFileSync(path).toString();
      const lns = content.split("\n");
      const line = lns.findIndex((ln) => ln.includes(importName));
      if (line !== -1) {
        const column = (_b = lns[line]) == null ? void 0 : _b.indexOf(importName);
        newError.setLocation({
          file: path,
          line: line + 1,
          column
        });
      }
    }
  }
  return newError;
}
function getViteErrorPayload(err) {
  var _a, _b, _c, _d;
  let plugin = err.plugin;
  if (!plugin && err.hint) {
    plugin = "astro";
  }
  const message = `${err.message}

${err.hint ?? ""}`;
  const frame = (_a = err.frame) == null ? void 0 : _a.replace(/\t/g, " ");
  return {
    type: "error",
    err: {
      ...err,
      frame,
      loc: {
        file: (_b = err.loc) == null ? void 0 : _b.file,
        line: ((_c = err.loc) == null ? void 0 : _c.line) ?? 0,
        column: ((_d = err.loc) == null ? void 0 : _d.column) ?? 0
      },
      plugin,
      message: message.trim(),
      stack: err.stack
    }
  };
}
export {
  createCustomViteLogger,
  enhanceViteSSRError,
  getViteErrorPayload
};
